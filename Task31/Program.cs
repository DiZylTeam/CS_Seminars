// Задайте массив из 12 элементов, заполненный случайными числами из промежутка [-9, 9]. Найдите сумму отрицательных и положительных элементов массива.
// Например, в массиве [3,9,-8,1,0,-7,2,-1,8,-3,-1,6] сумма положительных чисел равна 29, сумма отрицательных равна -20.



int[] GetArray(int size, int minValue, int maxValue)    // создаем возвращаемый метод для генерации массива, в который заложили три аргумента (размер массива, мин и макс значения)
{
    int[] res = new int[size];  // задаем переменную res, создающую новый массив из определенного количества элементов (size), т.е. здесь будет содержаться наш массив определенного размера
    for (int i = 0; i < size; i++)  // цикл for для того, чтобы пройтись по нашему массиву
    {
        res[i] = new Random().Next(minValue, maxValue + 1);     // задаем значение элементам массива - рандомное число в диапазоне от <minValue> до <maxValue + 1>
    }
    return res; // возвращаем массив
}

void PrintArray(int[] arr) // создаем метод void для печати (вывода) массива на экран 
                            // (т.е. лучше создавать для этого отдельный метод, т.к. когда большие программы - не всегда надо выводить массив сразу на консоль)
{
    for (int i = 0; i < arr.Length; i++)
    {
        Console.Write($"{arr[i]} ");
    }
}


// ===== создание возвращаемого метода =====

int[] GetSum(int[]arr2)  // создаем метод, в который в качестве аргумента закладываем наш массив, тип также указываем массив <int[]>
{
int positiveSum = 0;    // задаем переменную для суммы положительных чисел
int negativeSum = 0;    // задаем переменную для суммы отрицательных чисел
int[] res = new int[2]; // создаем новый массив, в который будут закладываться два значения (суммы положительных и отрицательных чисел)
foreach(int el in arr2)         // задаем цикл foreach, в нем указываем новую переменную el, которой присваивается не индекс элемента (как выше в цикле for), а его значение!!!
                                // не надо задавать длину массива, цикл foreach сам её определяет начиная с первого элемента и до последнего
{
    if (el > 0)
    {
        positiveSum += el;  // то же самое, что <positiveSum = positiveSum + el;
    }
    else
    {
        negativeSum += el;  // то же самое, что <positiveSum = positiveSum + el;
    }
}
res[0] = positiveSum;   // задаем значение для первого элемента массива (сумма положительных чисел)
res[1] = negativeSum;   // задаем значение для второго элемента массива (сумма отрицательных чисел)
return res;
}

// ===== создание void-метода =====

// void GetSum(int[]arr2)  // создаем метод, в который в качестве аргумента закладываем наш массив
// {
// int positiveSum = 0;    // задаем переменную для суммы положительных чисел
// int negativeSum = 0;    // задаем переменную для суммы отрицательных чисел
// foreach(int el in arr2)        // задаем цикл foreach, в нем указываем новую переменную el, которой присваивается не индекс элемента (как выше в цикле for), а его значение!!!
//                                 // не надо задавать длину массива, цикл foreach сам её определяет 
// {
//     if (el > 0)
//     {
//         positiveSum += el;  // то же самое, что <positiveSum = positiveSum + el;
//     }
//     else
//     {
//         negativeSum += el;  // то же самое, что <positiveSum = positiveSum + el;
//     }
// }
// Console.WriteLine(); //  команда выводи массив
// Console.WriteLine($"Positive sum = {positiveSum}, Negative sum = {negativeSum}");    // команда выводи сумму положительных и отрицательных чисел
// }


int[] array = GetArray(12, -9, 9);  // задаем переменную для исполнения возвращаемого метода (это обязательное условия для данного типа методов)
                                    // в скобках указываем значения наших переменных: длина массива и диапазон элементов массива
PrintArray(array);  // исполняем void-метод (void-методы исполняются без введения новой переменной, а сразу введением его названия и в скобках - то, что мы хотим вывести на консоль)
int[] sum = GetSum(array);
// GetSum(array);  // вызываем void-метод для вычисления сумм положительных и отрицательных чисел в массиве

Console.WriteLine();    // для void-метода данная команда не нужна, т.к. она уже встроена в сам метод
// Console.WriteLine($"Positive sum = {sum[0]}, Negative sum = {sum[1]}"); // для void-метода данная команда не нужна, т.к. она уже встроена в сам метод
PrintArray(sum);    // также можно использовать снова данный метод для вывода результата на печать

